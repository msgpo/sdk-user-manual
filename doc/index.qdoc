/****************************************************************************************
**
** Copyright (C) 2019 Jolla Ltd.
** Contact: David Llewellyn-jones <david.llewellyn-jones@jolla.com>
** See README and LICENSE.txt for licence details.
**
****************************************************************************************/

/*!
\contentspage {Sailfish App Library}
\page index

\image develop.png

\title SailfishApp Documentation

To ease development of applications for Sailfish OS and to make sure paths for
the applications are set correctly and application startup time is
accelerated, third party applications on Sailfish OS should use libsailfishapp.
This library provides certain convenience functions within the \c SailfishApp
namespace to set up your project, install all files into the right directories,
and get important paths at runtime via convenience methods.

This document also serves to describe the functionality of libsailfishapp so
that developers who cannot use it in their projects can use the info provided
here as a guide for how to replicate the directory layout and paths. However,
we generally recommend using libsailfishapp where possible, as it will allow
applications to easily and automatically integrate well with Sailfish OS.

\section1 How to use SailfishApp in your project

To use \c SailfishApp in your project:

\list 1
    \li Add \c {BuildRequires: pkgconfig(sailfishapp)} to your .spec file
    \li Set \c {TARGET = harbour-yourappname} in your .pro file
    \li Add \c {CONFIG += sailfishapp} to your .pro file
    \li Include \c {sailfishapp.h} in your .cpp file
    \li Use the \c {SailfishApp::} methods in your \c main()
\endlist

In the rest of this document, we will refer to the value of the
\c TARGET variable in your .pro file as \c $$TARGET
(this is also how you can use the variable itself in the .pro file).

Files that get installed by libsailfishapp and have to be present in the same
directory as the .pro file:

\list
    \li \c $$TARGET.png - An 86x86 pixel application icon
    \li \c $$TARGET.desktop - The .desktop file for your app
    \li \c qml/ - A folder containing all your QML files
\endlist

If you want to opt out of automatic deployment of the \c{qml/}
folder, set \c{CONFIG += sailfishapp_no_deploy_qml} before adding
the \c SailfishApp configuration option. You might want to set this option if
for some reason you intend to ship your QML files as Qt Resources (qrc).
We recommend that you keep the default setup and install QML files in the
filesystem instead.

\section2 Deploying app icons in multiple sizes

It's recommended that you provide application icons in multiple sizes, to
support different device types and different screen DPI settings. You can do
this with the following steps.

\list 1
\li Add \c{SAILFISHAPP_ICONS = size1 size2...} to your .pro file,
    enumerating all available icon sizes in the form \c{WIDTHxHEIGHT}
\li Ensure all icons are present as \c{icons/WIDTHxHEIGHT/$$TARGET.png}
    in the source tree
\endlist

For a list of recommended icon sizes, see the \l
{https://harbour.jolla.com/faq#3.1.0} {Harbour FAQ}. The \l
{https://sailfishos.org/design/icons/} {Sailfish App Icons Guidelines} include
useful and important material about how to design your apps to best suit the
Sailfish OS style.

\section2 Using i18n support in your project

To use the internationalization convenience features of libsailfishapp, do the
following.

\list 1
\li In your main .pro file, add:

\code
CONFIG += sailfishapp_i18n
\endcode

If you use id based translations also add:

\code
CONFIG += sailfishapp_i18n_idbased
\endcode
\li Run \c{qmake}
\li Run \c{make} (this will create or update the file
\c{translations/$APPNAME.ts} and all files in TRANSLATIONS)
\li In your RPM packaging .yaml file, add the following entry to the files
section:

\code
- '%{_datadir}/%{name}/translations'}
\endcode
\endlist

To add a new language to your project:

\list 1
\li In your main .pro file, add (with $LANG replaced with the language):

\code
TRANSLATIONS += translations/$APPNAME-$LANG.ts}
\endcode

(for example, for German, use "$APPNAME-de.ts", etc...)
\li Run \c{qmake}
\li Run \c{make}
\endlist

If during development you want to skip building the translations every time,
you can simply comment out the line

\code
CONFIG += sailfishapp_i18n
\endcode

in your qmake .pro file and the translations will not be built/updated. Be
sure to re-enable the line when you do the release build.

\section1 SailfishApp C++ API

The libsailfishapp C++ API can be used to quickly instantiate and configure an
application that fits in to the Sailfish OS environment and way of operating.
For example it sets up paths to ensure your application can access the Sailfish
Silica components, your apps private QML imports and your apps resources; it
simplifies provision of translations; and it provides convenience functions for
storing data in the correct location on the filesystem. If you're thinking of
submitting your application for inclusion in the Jolla Store, use of the API
isn't a requirement, but proper use it will significantly improve the chance of
your app passing the \l {https://harbour.jolla.com/} {Harbour QA} process.

For the most common use of the API, start by accessing the \c QGuiApplication
instance for your programme by calling the \c SailfishApp::application()
method, passing in any remaining arguments from the command line that you don't
want to consume yourself. This will return a pointer to the single \c
QGuiApplication instance for your application. This provides the main Qt event
loop, lets you manage the application lifecycle, and get basic information
about the screen, window configuration and so on.

Before calling the main event loop, you'll need to tell \c SailfishApp which
QML file to use for the topmost window. This can be set using a call to \c
SailfishApp::createView() to access the application \c QQuickView instance. Call
the \c setSource() method of this \c QQuickView instance to configure the
location of the QML file to use.

\quotefile example01/src/harbour-demo.cpp

In this example code the application \c SailfishApp::pathTo() is used to specify
the location of the root QML file to use. A call to \c SailfishApp::pathTo()
takes a relative path inside your application's data folder and converts it
into a fully qualified path. Your application's data directory is located at \c
/usr/share/$$TARGET/, so in this case the fully qualified path of the QML file
will be \c /usr/share/$$TARGET/qml/harbour-demo.qml

The above example allows for full integration between your C++ code and QML, as
described below. However, if your application is written entirely using QML,
and requires only limited interaction with C++ code, then you can simplify the
C++ even further by making use of \c SailfishApp::main(). This wraps all of the
code in the example above into a single call, which you can deploy like this.

\quotefile example-others/src/harbour-demo-02.cpp

The call to \c SailfishApp::main() will load in the QML file located at \c
/usr/share/$$TARGET/qml/$$TARGET.qml as the topmost window. It then enters the
main event loop and only returns once all windows have been closed.

Use of \c SailfishApp::main() is a great way to get a Sailfish application
up-and-running in the quickest time and with the smallest amount of boilerplate
code. If you find you need more flexibility, you can always convert it to use
\c SailfishApp::application() later.

\section1 SailfishApp QML-only launcher

If you don't plan to use any C++ and wish to develop entirely in QML, you can
forego the boilerplate C++ code entirely by making use of the \c
sailfishapp_qml \c CONFIG option in your .pro file. To do this, you'll need to
configure your project as follows.

\list 1
    \li Add \c {BuildRequires: pkgconfig(sailfishapp)} to your .spec file
    \li Set \c {TARGET = harbour-yourappname} in your .pro file
    \li Add \c {CONFIG += sailfishapp_qml} to your .pro file
    \li Include \c {qml/$$TARGET.qml} in your data directory \c
    /usr/share/$$TARGET.
\endlist

Configured this way your QML files can still access private QML imports and the
Sailfish Silica API.

\section1 Custom context properties

If you're working with both C++ and QML, at some stage you'll need to share
data between the two. Custom context properties are a straightforward way to
expose C++ variables in your QML code. Such properties are managed through the
\c QQmlContext object that can be obtained through your application's \c
QQuckView.

For example, in the following code the \c count variable on the C++ side is
used to set a similarly named \c count variable for use on the QML side.

\quotefile example-others/src/harbour-demo-03.cpp

This can then be used as a variable within your QML code, for example as
follows.

\quotefile example-others/qml/pages/MainPage.qml

Other basic types can also be passed from C++ to QML in this way. However, for
these basic types, changes to the C++ variable will not be reflected in the
variable on the QML side unless \c QQmlContext::setContextProperty() is called
again. This can be seen in the following code, where the method is called every
second to update the QML \c count variable.

\quotefile example-others/src/harbour-demo-04.cpp

If you want tighter and more dynamic integration between your C++ and QML, a \c
QObject with defined properties is a better way to go. Because each properties
is set to emit a signal when its value changes, the QML will automatically
update to reflect changes to properties made on the C++ side, without having to
explicitly update the context.

For example, suppose we have this basic \c QObject with a single property
called \c count. For this example, the class can be defined entirely in its
header file.

\quotefile example-others/src/counter.h

We can add all of the properties of this C++ QObject for access on the QML side
using a single call to \c QQmlContext::setContextObject(). Any changes made to
the properties on the C++ side will be automatically reflected in the user
interface QML.

\quotefile example-others/src/harbour-demo-05.cpp

For more info, see the \l {https://doc.qt.io/qt-5.6/QQmlContext.html} {Qt
QQmlContext documentation}. More complex data structures can also be managed
this way, for example by passing an extension of a \l
{https://doc.qt.io/qt-5.6/QAbstractListModel.html} {QAbstractListModel}
containing data to be displayed in a list or other model.

\section1 Register a custom QML singleton type at runtime

In some cases, where there's a need for a single populated data structure to be
accessible from everywhere, a singleton class would be another way to go. For
example, using the same code from above, we can turn the \c Counter class into
a singleton by adding an \c { #include <QQmlEngine> } declaration along with
the following public static methods and private member to the \c Counter
class header file:

\quotefromfile example-others/src/counter-06.h

\skipuntil int m_count
\printuntil Counter * instance

and in a separate \c counter.cpp file, implement the methods as follows.

\quotefile example-others/src/counter-06.cpp

This singleton class can be registered for access within QML, by adding the
following code into your \c main function.

\quotefromfile example-others/src/harbour-demo-06.cpp

\skipto Counter::instantiate
\printuntil Counter::provider

After which it becomes accessible from any QML file where \c
harbour.sailfishapp.counter is imported, like this:

\quotefile example-others/qml/pages/MainPage06.qml

If you're planning to submit your application for inclusion in the Jolla Store,
there are some restrictions on the names you can use for your \c
qmlRegisterSingletonType import. See the \l
{https://harbour.jolla.com/faq#5.3.0} {Harbour FAQ} for more info.

\section1 Register a custom QML type at runtime

If you want to create instances of a C++ type from within QML, you can register
the type in a similar way to the singleton code above. This allows more complex
data types and structures to be used and their type referenced by name.

Let's suppose we want this stripped-down version of our \c Counter class to be
instantiatable from QML.

\quotefile example-others/src/counter-07.h

We can register the class for use within QML by adding the following line to
our \c main function. It should be added before the QML is instantiated.

\quotefromfile example-others/src/harbour-demo-07.cpp

\skipto qmlRegisterType
\printuntil qmlRegisterType

We can now import the type into our QML files and create instances directly
within the QML.

\quotefile example-others/qml/pages/MainPage07.qml

In the above QML code we instantiate a \c Counter object with the QML property
name \c qmlcounter. The \c count property of \c qmlcounter is initialised with
the value 5.

It's also possible to access the instantiated object from the C++ side. In
general, accessing QML objects from C++ is considered bad practice, because it
produces tight-coupling between the user interface QML and the background C++.
It's preferable to avoid dependencies from the QML back to C++, so that the QML
remains flexible and changeable without having an impact on the C++ code.
However, we provide the details here as it helps to tie everything together.

To access the \c qmlcounter object from C++ we must specify an object name for
it:

\quotefromfile example-others/qml/pages/MainPage07.qml

\skipto property Counter qmlcounter
\printuntil }

We can then get a pointer to this instance from the C++ side using the
following.

\quotefromfile example-others/src/harbour-demo-07.cpp

\skipto findChild
\printuntil findChild

The ordering is important here. The type must be registered before the QML is
instantiated and the object pointer must be extracted afterwards. Hence, our
\c main function might look something like this.

\quotefile example-others/src/harbour-demo-07.cpp

To reiterate, accessing QML objects from C++ is generally a bad idea. Where
data must be shared between C++ and QML it's preferable to create objects with
properties on the C++ side and expose them as context properties in the QML.

If you're planning to submit your application for inclusion in the Jolla Store,
there are some restrictions on the names you can use for your \c
qmlRegisterType import. See the \l {https://harbour.jolla.com/faq#5.3.0}
{Harbour FAQ} for more info.

\section1 Installing and using private shared libraries

If you have your own shared libraries that you want your application to
dynamically link against at runtime, they should:

\list 1
\li be included in your application's RPM, and
\li be installed in the \c /usr/share/$$TARGET folder.
\endlist

These requirements must be met for your application to pass \l
{https://harbour.jolla.com/} {Harbour QA} and to be included in the Jolla
Store. You can't, for example, have a separate package containing the library
as a dependency of your application.

If you arrange your application in this way and use \c SailfishApp as
described above, then the \c rpath (the runtime library search path that gets
baked into your application) of your application will be automatically set up
to point to \c \usr\share\$$TARGET\lib, and so your application should pick up
the shared libraries from the correct location without having to specify it
separately. See the \l {https://harbour.jolla.com/faq#Shared_Libraries} {Jolla
Harbour FAQ} for more info.

When you're developing a project in QtCreator, you can either build a shared
library directly as part of your project, or include the binary.

\section2 Include a prebuilt shared library in your application project

It may be that you already have a library in binary form you want to include
with your application, for example where you've built the library in a
completely separate project.

In this case, you can store a copy of the library binary and headers in your
application project and reference them in the project files in order to have
the library installed alongside the application in the correct location.

For example, suppose we've built the \c Counter class described in the previous
section into its own library called \c libdemo and suppose we want to include
it in the \c harbour-demo application project. We create a \c libdemo
subdirectory inside our project directory containing the header files\c
libdemo.h, the \c libdemo.o shim and the dynamic library \c libdemo.so.1. We
can then add the following lines to our \c harbour-demo.pro file in order for
the application to be built against the library.

\quotefromfile example08/example08.pro

\skipto INCLUDEPATH
\printuntil LIBS

In addition, we want the dynamic library to be included in the RPM package and
installed in the correct location when the application is installed. To achieve
this, we add the following further lines to the \c harbour-demo.pro file.

\quotefromfile example08/example08.pro

\skipto libdemo.files
\printuntil INSTALLS

These small changes allow the application to be built against the library and
for the library to be installed in the correct location to pass the Jolla
\l {https://harbour.jolla.com/} {Harbour QA}.

\section2 Build a shared library as part of your application project

There are a number of ways to structure a Qt project to build both an
application and a library into a single package. Here we present one approach
that involves using a metaproject to hold each subproject. For the main
application we will use the same code as in the previous sections, with the
application called \c harbour-demo. The library will contain just the single \c
Counter class also described above, in a library called \c libdemo.

Our project structure looks like this.

\badcode
harbour-demo
|   harbour-demo.pro
|
+---harbour-demo-app
|   |   harbour-demo-app.pro
|   |
|   +---icons
|   |   |   ...
|   |
|   +---qml
|   |   |   harbour-demo.qml
|   |   |   ...
|   |
|   +---src
|       |   harbour-demo.cpp
|
+---libdemo
|   |   libdemo.pro
|   |   libdemo.h
|   |   libdemo.cpp
|
+---rpm
    |   harbour-demo.spec
\endcode

The top level \c harbour-demo.pro file is a meta project that just links to the
other two subprojects as follows.

\quotefile example09/example09.pro

The \c harbour-demo-app.pro file contains the same \c SailfishApp details we
described in the preceding sections for an application without any libraries,
as you can see here:

\quotefromfile example09/harbour-demo-app/harbour-demo-app.pro

\printuntil HEADERS

In addition we append the following lines to the end of this file, in order to
compile, link against and install the libdemo library.

\printuntil INSTALLS

Similarly our \c libdemo.pro project files contains the usual material for
building a library.

\quotefile example09/libdemo/libdemo.pro

The only other change we make to the structure is to ensure the \c rpms folder
from our original project is now contained in the metaproject, rather than the
application or library sub projects.

Building the project will produce a single RPM package containing both the
application and library installed in the correct locations, and so that the
application can find the library at runtime.

\section1 Installing and using private QML imports

Any private QML imports should be installed under \c /usr/share/$$TARGET. By
using the \c SailfishApp application calls described above, the directory is
automatically added to the QML import path, so any modules can be immediately
imported into your QML.

Let's take our example of the \c Counter module from above and see how we might
implement this as a pure QML module. We start by adding the folder \c
harbour/sailfishapp/counter into the root of our project. The folder structure
is designed to match the module name, which will be \c
habour.sailfishapp.counter.

Inside this folder we'll have two files. First, the QML that describes our \c
Counter type, which we store as \c Counter10.qml. The \c 10 part of the
filename represents the "1.0" version and is designed to simplify versioning
later.

\quotefile example10/harbour/sailfishapp/counter/Counter10.qml

As you can see, this reflects the properties contained in our \c Counter class
above. In order to turn the directory into a module, we must also include the
following file called \c qmldir in the same directory.

\quotefile example10/harbour/sailfishapp/counter/qmldir

The first line states the module name. The following lines list the QML types,
their version number and the file that contains their definition.

In order for us to use this as a module, it must be installed in the \c
/usr/share/$$TARGET folder on installation of our application. In other words,
we'll end up with a directory \c
/usr/share/$$TARGET/harbour/sailfishapp/counter containing our two module
files. It's essential that the directory structure matches the name of the
module. To have this installed in the correct place, we can add the following
lines to our \c harbour-demo.pro file.

\quotefromfile example10/example10.pro

\skipto modules.files
\printuntil INSTALLS

It's also convenient to list the files in the \c DISTFILES structure of the
\c harbour-demo.pro file so they appear as part of your project in Qt Creator.

We can now import the module into the QML of our application.

\quotefile example10/qml/pages/MainPage.qml

We can access this object from our C++ using code similar to the following.

\quotefile example10/src/harbour-demo.cpp

This C++ code is provide for illustration, but in general accessing QML from
C++ in this way is considered bad practice. It's better to define any data
structures shared between C++ and QML in the C++ and access them from your QML,
in order to ensure your QML remains flexible without changes impacting the
underlying C++. As described in the \l {Register a custom QML type at runtime}
section, you can also register QML modules using \c qmlRegisterType from within
your C++.

If you're planning to submit your application for inclusion in the Jolla Store,
there are some restrictions on the names you can use for your import. See the
\l {https://harbour.jolla.com/faq#5.3.0} {Harbour FAQ} for more info.

\section1 Storing application configuration files

On Sailfish OS, the application directory locations follow the \l
{https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html}
{XDG Base Directory Specification}. Accordingly, all application configuration
files should be stored relative to the directory defined by the \c
$XDG_CONFIG_HOME environment variable. More specifically, a Sailfish
application should store its configuration files in the \c
$XDG_CONFIG_HOME/$$TARGET directory.

In practice, this means storing them in \c $HOME/.config/$$TARGET. However,
this path shouldn't be hardcoded and for users of \c SailfishApp the
appropriate Qt \c QStandardPath should be used instead.

\quotefromfile example-others/src/harbour-demo-11.cpp

\skipto config_dir
\printuntil filePath

When using \c SailfishApp, the application name will be automatically set to
ensure this path works correctly. \c SailfishApp uses the binary name in the
case of a C++ applications or the first argument in the case of a QML-only
application with the \c{sailfish-qml} launcher

Here's a brief example, based on our earlier code, which loads a configuration
variable in at the start and saves it out at the end using standard file
operations. The directory isn't created automatically, so notice we have to
create it in order to allow the configuration file to be written out
successfully at the end.

\quotefile example-others/src/harbour-demo-11.cpp

We can make our code even simpler and more effective by harnessing the \c
QSettings class. With the \c QSettings default constructor, the application
name is again used to automatically select the correct storage location.

\quotefile example-others/src/harbour-demo-12.cpp

Currently application-specific configurations aren't stored as part of the
Sailfish OS backup process and the files will remain on the device if the
application is uninstalled. However, this isn't guaranteed behaviour and so
shouldn't be relied upon not to change in the future.

\section1 Storing application data and cached files

Application data is any data that's generated by the user while using the
application, or application-generated data which isn't considered to be
configuration data. Just like the configuration, there's a specific location
where this data should be stored: in the \c $XDG_DATA_HOME/$$TARGET folder,
which in practice is set to \c $HOME/.local/share. However, as with the
configuration path, applications shouldn't hardcode these paths and users of \c
SailfishApp should use the path returned by \c
QStandardPaths::writableLocation(QStandardPaths::AppDataLocation) instead.

Note that by default \c
QStandardPaths::writableLocation(QStandardPaths::AppDataLocation) will actually
return \c $HOME/.local/share/$$TARGET/$$TARGET (i.e. with the $$TARGET folder
repeated). This is because when using \c SailfishApp both the application name
and the organization name are set to the name of your application, and the path
returned is of the form \c $HOME/.local/share/<ORGANIZATION_NAME>/$$TARGET.

The following example shows how the approach could be used in practice.

\quotefile example-others/src/harbour-demo-13.cpp

Currently application-specific data aren't stored as part of the Sailfish OS
backup process and any files stored in the data folder will remain on the
device if the application is uninstalled. However, this isn't guaranteed
behaviour and so shouldn't be relied upon not to change in the future.

To store cache files, use the location returned by
\c{QStandardPaths::writableLocation(QStandardPaths::CacheLocation)}. Cache
files can be removed at any time by the system if disk space is low and these
files are not guaranteed to be backed up.

You can also use the Qt Quick Local Storage API to store data directly from
your QML-only Sailfish application. \c SailfishApp will make sure that your
application uses an appropriate application-specific storage directory.

*/

