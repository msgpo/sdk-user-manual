/****************************************************************************************
**
** Copyright (C) 2019 Jolla Ltd.
** Contact: David Llewellyn-jones <david.llewellyn-jones@jolla.com>
** See README and LICENSE.txt for licence details.
**
****************************************************************************************/

/*!
\page sdk-user-manual-sailfishapp.html
\nextpage {SailfishApp C++ API}
\contentspage {Sailfish SDK User Manual}{Contents}

\title How to use SailfishApp in your project

\section1 Overview

To use \c SailfishApp in your project:

\list 1
    \li Add \c {BuildRequires: pkgconfig(sailfishapp)} to your .spec file
    \li Set \c {TARGET = harbour-yourappname} in your .pro file
    \li Add \c {CONFIG += sailfishapp} to your .pro file
    \li Include \c {sailfishapp.h} in your .cpp file
    \li Use the \c {SailfishApp::} methods in your \c main()
\endlist

In the rest of this document, we will refer to the value of the
\c TARGET variable in your .pro file as \c $$TARGET
(this is also how you can use the variable itself in the .pro file).

Files that get installed by libsailfishapp and have to be present in the same
directory as the .pro file:

\list
    \li \c $$TARGET.png - An 86x86 pixel application icon
    \li \c $$TARGET.desktop - The .desktop file for your app
    \li \c qml/ - A folder containing all your QML files
\endlist

If you want to opt out of automatic deployment of the \c{qml/}
folder, set \c{CONFIG += sailfishapp_no_deploy_qml} before adding
the \c SailfishApp configuration option. You might want to set this option if
for some reason you intend to ship your QML files as Qt Resources (qrc).
We recommend that you keep the default setup and install QML files in the
filesystem instead.

\section1 Deploying app icons in multiple sizes

It's recommended that you provide application icons in multiple sizes, to
support different device types and different screen DPI settings. You can do
this with the following steps.

\list 1
\li Add \c{SAILFISHAPP_ICONS = size1 size2...} to your .pro file,
    enumerating all available icon sizes in the form \c{WIDTHxHEIGHT}
\li Ensure all icons are present as \c{icons/WIDTHxHEIGHT/$$TARGET.png}
    in the source tree
\endlist

For a list of recommended icon sizes, see the \l
{https://harbour.jolla.com/faq#3.1.0} {Harbour FAQ}. The \l
{https://sailfishos.org/design/icons/} {Sailfish App Icons Guidelines} include
useful and important material about how to design your apps to best suit the
Sailfish OS style.

\section1 Using i18n support in your project

To allow translations to be used in an application, Sailfish OS builds on the
internationalization capabilies of Qt. This allows, for example, translatable
strings to be used rather than string literals within code.

For more general information about how these Qt-based internationalization
features works, see the \l {https://doc.qt.io/qt-5/qtlinguist-index.html} {Qt
Linguist Manual}.

When referring to translatable strings within your code, it's possible to use
either the untranslated strings directly as references, or id-based references.
See the Qt documentation on \l
{https://doc.qt.io/qt-5/linguist-id-based-i18n.html} {id based translations}
for more info on the topic.

To use the internationalization convenience features of libsailfishapp, do the
following.

\list 1
\li In your main .pro file, add:

\code
CONFIG += sailfishapp_i18n
\endcode

To use id based translations you should also add the following.

\code
CONFIG += sailfishapp_i18n_idbased
\endcode
\li Run \c{qmake}
\li Run \c{make} (this will create or update the file
\c{translations/$APPNAME.ts} and all files in TRANSLATIONS)
\li In your RPM packaging .yaml file, add the following entry to the files
section:

\code
- '%{_datadir}/%{name}/translations'}
\endcode
\endlist

As an alternative to running \c{qmake} and \c{make} at the command line in
steps 2 and 3 above, you can instead update the translations directly from the
Sailfish SDK IDE. Open the \b Tools menu, then select the \b {External >
Linguist > Update translations (lupdate)} option. This also avoids having to
rebuild the entire project again.

To add a new language to your project:

\list 1
\li In your main .pro file, add (with $LANG replaced with the language):

\code
TRANSLATIONS += translations/$APPNAME-$LANG.ts
\endcode

(for example, for German, use "$APPNAME-de.ts", etc...)
\li Run \c{qmake}
\li Run \c{make}
\endlist

As before, instead of steps 2 and 3, you can also use the \b {Tools > External >
Linguist > Update translations (lupdate)} option from the IDE to regenerate
your translation files.

If during development you want to skip building the translations every time,
you can simply comment out the line

\code
CONFIG += sailfishapp_i18n
\endcode

in your qmake .pro file and the translations will not be built/updated. Be
sure to re-enable the line when you do the release build.

*/

